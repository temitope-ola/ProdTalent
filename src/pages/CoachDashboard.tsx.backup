import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import useAuth from '../contexts/AuthContext';
import { FirestoreService, UserProfile } from '../services/firestoreService';
import Avatar from '../components/Avatar';
import CoachAvailabilityManager from '../components/CoachAvailabilityManager';
// import AppointmentManager from '../components/AppointmentManager';
// import EmailJSConfig from '../components/EmailJSConfig';


export default function CoachDashboard() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [talents, setTalents] = useState<UserProfile[]>([]);
  const [recruteurs, setRecruteurs] = useState<UserProfile[]>([]);
  const [isAgendaOpen, setIsAgendaOpen] = useState(false);
  const [isAppointmentManagerOpen, setIsAppointmentManagerOpen] = useState(false);
  const [isEmailJSConfigOpen, setIsEmailJSConfigOpen] = useState(false);

  const [loading, setLoading] = useState(false);

  // Redirection si l'utilisateur n'est pas un coach
  useEffect(() => {
    if (user && user.role !== 'coach') {
      navigate(`/dashboard/${user.role}`, { replace: true });
    }
  }, [user, navigate]);

  // Charger le profil et les données
  useEffect(() => {
    if (user) {
      loadProfile();
      loadTalents();
      loadRecruteurs();
    }
  }, [user]);

  const loadProfile = async () => {
    if (!user) return;
    setLoading(true);
    try {
      const userProfile = await FirestoreService.getCurrentProfile(user.id, user.role);
      setProfile(userProfile);
    } catch (error) {
      console.error('Erreur lors du chargement du profil:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadTalents = async () => {
    if (!user) return;
    try {
      const talentsList = await FirestoreService.getAllTalents();
      setTalents(talentsList);
    } catch (error) {
      console.error('Erreur lors du chargement des talents:', error);
    }
  };

  const loadRecruteurs = async () => {
    if (!user) return;
    try {
      const recruteursList = await FirestoreService.getAllRecruteurs();
      setRecruteurs(recruteursList);
    } catch (error) {
      console.error('Erreur lors du chargement des recruteurs:', error);
    }
  };

  // Affichage de chargement
  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        color: '#ffcc00'
      }}>
        Chargement...
      </div>
    );
  }

  // Redirection si pas connecté
  if (!user) {
    navigate('/', { replace: true });
    return null;
  }

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/', { replace: true });
    } catch (error) {
      console.error('Erreur lors de la déconnexion:', error);
    }
  };

  const handleViewTalents = () => {
    navigate('/coach/talents');
  };

  const handleViewRecruteurs = () => {
    navigate('/coach/recruteurs');
  };



  const handleScheduleSession = () => {
    alert('Fonctionnalité de planification de session à implémenter');
    // Ici vous pourriez ouvrir une modale de planification
  };

  const handleCreateRecommendation = () => {
    alert('Fonctionnalité de création de recommandation à implémenter');
    // Ici vous pourriez ouvrir une modale de création de recommandation
  };

  const handleOpenMessages = () => {
    alert('Fonctionnalité des messages à implémenter');
    // Ici vous pourriez ouvrir un chat ou naviguer vers une page de messages
  };

  const handleViewResources = () => {
    alert('Fonctionnalité des ressources à implémenter');
    // Ici vous pourriez naviguer vers une page de ressources
  };

  const handleViewJobs = () => {
    navigate('/jobs');
  };

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#0a0a0a',
      color: '#f5f5f7',
      display: 'flex',
      justifyContent: 'center'
    }}>
      <div style={{
        width: '1214px',
        maxWidth: '100%',
        padding: '24px'
      }}>
        <header style={{ 
          display: 'flex', 
          gap: 16, 
          alignItems: 'center',
          paddingBottom: 16,
          borderBottom: '1px solid #333',
          padding: '0 24px 16px 24px'
        }}>
          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>
            <h1 style={{ margin: 0, color: '#f5f5f7', fontSize: '24px', fontWeight: 'bold' }}>ProdTalent</h1>
            <span style={{ color: '#ffcc00', fontSize: '14px', marginTop: '4px' }}>Coach Dashboard</span>
          </div>
          <div style={{ flex: 1 }} />
          <button 
            onClick={handleLogout}
            style={{
              padding: '8px 16px',
              backgroundColor: '#333',
              color: '#f5f5f7',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            Se déconnecter
          </button>
        </header>

        <section style={{ marginTop: 24, padding: '0 24px' }}>
          <h2 style={{ color: '#ffcc00' }}>Bienvenue {user.displayName || (user.email ? user.email.split('@')[0] : 'Utilisateur')}</h2>
          <p style={{ color: '#f5f5f7' }}>Accompagnez les talents et connectez-vous avec les recruteurs.</p>
          
          {/* Profil utilisateur */}
          {profile && (
            <div style={{ 
              marginBottom: 24,
              marginTop: 24,
              padding: 0, 
              backgroundColor: '#111', 
              borderRadius: 4,
              border: 'transparent',
              overflow: 'hidden',
              height: '150px'
            }}>
              <div style={{ display: 'flex', alignItems: 'flex-start' }}>
                <div style={{ 
                  width: '150px', 
                  height: '150px', 
                  backgroundColor: '#ffcc00',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  borderRadius: '4px 0 0 4px'
                }}>
                  <Avatar 
                    email={profile.email} 
                    src={profile.avatarUrl} 
                    size="large"
                    editable={true}
                    onImageChange={async (file) => {
                      try {
                        const avatarUrl = await FirestoreService.uploadAvatar(file);
                        await FirestoreService.updateProfile(profile.id, profile.role, { avatarUrl });
                        // Recharger le profil
                        const updatedProfile = await FirestoreService.getCurrentProfile(profile.id, profile.role);
                        if (updatedProfile) {
                          setProfile(updatedProfile);
                        }
                      } catch (error) {
                        console.error('Erreur lors de l\'upload de l\'avatar:', error);
                      }
                    }}
                  />
                </div>
                <div style={{ flex: 1, padding: '20px' }}>
                  <h3 style={{ color: '#ffcc00', marginTop: 0, marginBottom: '12px' }}>Mon Profil</h3>
                  <h4 style={{ color: '#f5f5f7', margin: '0 0 8px 0' }}>
                    {profile.displayName || (profile.email ? profile.email.split('@')[0] : 'Utilisateur')}
                  </h4>
                  <p style={{ color: '#888', margin: '0 0 4px 0' }}>
                    <strong>Rôle:</strong> {profile.role}
                  </p>
                  <p style={{ color: '#888', margin: '0' }}>
                    <strong>Membre depuis:</strong> {profile.createdAt.toLocaleDateString()}
                  </p>
                </div>
              </div>
              {profile.bio && (
                <p style={{ color: '#f5f5f7', marginTop: '12px' }}>
                  <strong>Bio:</strong> {profile.bio}
                </p>
              )}
            </div>
          )}

          {/* Statistiques rapides */}
          <div style={{ 
            marginBottom: 24, 
            padding: 20, 
            backgroundColor: '#111', 
            borderRadius: 4,
            border: 'transparent'
          }}>
                        <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Statistiques</h3>
            <p style={{ color: '#f5f5f7' }}><strong>Talents disponibles:</strong> {talents.length}</p>
            <p style={{ color: '#f5f5f7' }}><strong>Recruteurs actifs:</strong> {recruteurs.length}</p>
          </div>
          
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
            gap: 24, 
            marginTop: 32 
          }}>
            {/* Mes talents */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Mes Talents</h3>
              <p style={{ color: '#f5f5f7' }}>Gérez vos talents accompagnés ({talents.length} disponibles)</p>
              <button 
                onClick={handleViewTalents}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Voir mes talents
              </button>
            </div>

            {/* Mes recruteurs */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Mes Recruteurs</h3>
              <p style={{ color: '#f5f5f7' }}>Gérez vos recruteurs partenaires ({recruteurs.length} actifs)</p>
              <button 
                onClick={handleViewRecruteurs}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Voir mes recruteurs
              </button>
            </div>

            {/* Sessions de coaching */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Sessions de Coaching</h3>
              <p style={{ color: '#f5f5f7' }}>Planifiez et gérez vos sessions</p>
              <div style={{ display: 'flex', gap: 12, marginTop: '12px', flexWrap: 'wrap' }}>
                <button 
                  onClick={() => setIsAgendaOpen(true)}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: 'transparent',
                    color: '#ffcc00',
                    border: '1px solid #ffcc00',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                >
                  Configurer l'agenda
                </button>
                <button 
                  onClick={() => setIsAppointmentManagerOpen(true)}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#ffcc00',
                    color: '#000',
                    border: '1px solid #ffcc00',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontWeight: 'bold'
                  }}
                >
                  📅 Gérer les rendez-vous
                </button>
              </div>
            </div>

            {/* Recommandations */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Recommandations</h3>
              <p style={{ color: '#f5f5f7' }}>Recommandez vos talents aux recruteurs</p>
              <button 
                onClick={handleCreateRecommendation}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Créer une recommandation
              </button>
            </div>

            {/* Messages */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Messages</h3>
              <p style={{ color: '#f5f5f7' }}>Communiquez avec les talents et recruteurs</p>
              <button 
                onClick={handleOpenMessages}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Ouvrir les messages
              </button>
            </div>

            {/* Configuration EmailJS */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Notifications Email</h3>
              <p style={{ color: '#f5f5f7' }}>Configurez les notifications par email pour les rendez-vous</p>
              <button 
                onClick={() => setIsEmailJSConfigOpen(true)}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Configurer EmailJS
              </button>
            </div>

            {/* Ressources */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Ressources</h3>
              <p style={{ color: '#f5f5f7' }}>Accédez aux outils et ressources de coaching</p>
              <button 
                onClick={handleViewResources}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Voir les ressources
              </button>
            </div>

            {/* Offres d'emploi */}
            <div style={{
              backgroundColor: '#111',
              padding: 20,
              borderRadius: 4,
              border: 'transparent'
            }}>
              <h3 style={{ color: '#ffcc00', marginTop: 0 }}>Offres d'emploi</h3>
              <p style={{ color: '#f5f5f7' }}>Découvrez les dernières offres d'emploi disponibles</p>
              <button 
                onClick={handleViewJobs}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  color: '#ffcc00',
                  border: '1px solid #ffcc00',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  marginTop: '12px'
                }}
              >
                Voir les offres
              </button>
            </div>
          </div>
        </section>

        {/* Modal de gestion des disponibilités */}
        {isAgendaOpen && (
          <CoachAvailabilityManager onClose={() => setIsAgendaOpen(false)} />
        )}

        {/* Modal de gestion des rendez-vous */}
        {/* {isAppointmentManagerOpen && (
          <AppointmentManager onClose={() => setIsAppointmentManagerOpen(false)} />
        )} */}

        {/* Modal de configuration EmailJS */}
        {/* {isEmailJSConfigOpen && (
          <EmailJSConfig onClose={() => setIsEmailJSConfigOpen(false)} />
        )} */}

      </div>
    </div>
  );
}
