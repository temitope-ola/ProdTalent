import { collection, addDoc, getDocs, query, where, updateDoc, deleteDoc, doc, getDoc, Timestamp } from 'firebase/firestore';
import { db } from '../firebase';
import { Appointment, ApiResponse } from '../types';
import { COLLECTION_NAMES, APPOINTMENT_STATUS, TIME_SLOTS } from '../constants';
import { handleServiceError, createApiResponse } from '../utils/errorHandler';
import sendGridTemplateService from './sendGridTemplateService';
import { googleIntegratedService } from './googleIntegratedService';
import { BackendEmailService } from './backendEmailService';

// Export for backward compatibility
export type { Appointment } from '../types';

export class AppointmentService {
  static async createAppointment(
    appointmentData: Omit<Appointment, 'id' | 'timestamp' | 'createdAt'>
  ): Promise<ApiResponse<string>> {
    try {
      console.log('Tentative de cr√©ation du rendez-vous avec les donn√©es:', appointmentData);
      
      // V√©rification de conflit avant la cr√©ation
      const existingResult = await this.getCoachAppointments(appointmentData.coachId);
      if (!existingResult.success || !existingResult.data) {
        return createApiResponse(false, null as any, 'Erreur lors de la v√©rification des conflits');
      }

      const conflictingAppointment = existingResult.data.find(appointment => 
        appointment.date === appointmentData.date && 
        appointment.time === appointmentData.time && 
        appointment.status !== 'annul√©'
      );

      if (conflictingAppointment) {
        return createApiResponse(false, null as any, `Ce cr√©neau est d√©j√† r√©serv√© par ${conflictingAppointment.talentName}`);
      }

      const cleanAppointmentData = {
        ...appointmentData,
        createdAt: Timestamp.now(),
        timestamp: Timestamp.now(),
        notes: appointmentData.notes?.trim() || null
      };
      
      console.log('Donn√©es nettoy√©es √† sauvegarder:', cleanAppointmentData);
      
      const docRef = await addDoc(collection(db, 'Appointments'), cleanAppointmentData);
      
      console.log('Rendez-vous cr√©√© avec succ√®s, ID:', docRef.id);

      // Notification EMAIL au talent (Gmail API avec fallback SendGrid)
      try {
        const gmailSent = await this.sendEmailWithGmail('new', {
          recipientEmail: appointmentData.talentEmail,
          recipientName: appointmentData.talentName,
          coachName: appointmentData.coachName,
          appointmentDate: appointmentData.date,
          appointmentTime: appointmentData.time,
          meetingType: 'Session de coaching'
        });

        if (!gmailSent) {
          await sendGridTemplateService.sendNewAppointment({
            recipientEmail: appointmentData.talentEmail,
            recipientName: appointmentData.talentName,
            coachName: appointmentData.coachName,
            appointmentDate: appointmentData.date,
            appointmentTime: appointmentData.time,
            meetingType: 'Session de coaching'
          });
        }
        console.log('‚úÖ Email de r√©servation envoy√© au talent (Gmail API ou SendGrid)');
      } catch (emailError) {
        console.error('‚ùå Erreur envoi email r√©servation:', emailError);
        // Ne pas faire √©chouer la cr√©ation si l'email √©choue
      }
      
      // Notification SendGrid template au coach pour nouveau rendez-vous
      try {
        // R√©cup√©rer l'email du coach depuis son profil
        const { FirestoreService } = await import('./firestoreService');
        const coachProfile = await FirestoreService.getCurrentProfile(appointmentData.coachId, 'coach');
        
        if (coachProfile && coachProfile.email) {
          // Utiliser Gmail API pour le coach
          const gmailSentToCoach = await this.sendEmailWithGmail('new', {
            recipientEmail: coachProfile.email,
            recipientName: appointmentData.coachName,
            coachName: appointmentData.coachName,
            appointmentDate: appointmentData.date,
            appointmentTime: appointmentData.time,
            meetingType: `Nouveau rendez-vous avec ${appointmentData.talentName}`
          });

          if (!gmailSentToCoach) {
            // Fallback SendGrid si Gmail √©choue
            await sendGridTemplateService.sendNewAppointment({
              recipientEmail: coachProfile.email,
              recipientName: appointmentData.talentName,
              coachName: appointmentData.coachName,
              appointmentDate: appointmentData.date,
              appointmentTime: appointmentData.time,
              meetingType: `Nouveau rendez-vous avec ${appointmentData.talentName}`
            });
          }
          console.log('‚úÖ Email de nouveau rendez-vous envoy√© au coach (Gmail API ou SendGrid fallback)');
        } else {
          console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer l\'email du coach');
        }
      } catch (emailError) {
        console.error('‚ùå Erreur envoi email nouveau rendez-vous coach SendGrid:', emailError);
        // Ne pas faire √©chouer la cr√©ation si l'email √©choue
      }

      return createApiResponse(true, docRef.id);
    } catch (error) {
      return handleServiceError(error, 'cr√©ation du rendez-vous');
    }
  }

  static async getCoachAppointments(coachId: string): Promise<ApiResponse<Appointment[]>> {
    try {
      const q = query(
        collection(db, 'Appointments'),
        where('coachId', '==', coachId)
      );
      const querySnapshot = await getDocs(q);
      const appointments: Appointment[] = [];
      
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        appointments.push({
          id: doc.id,
          ...data,
          timestamp: data.timestamp?.toDate ? data.timestamp.toDate() : data.timestamp,
          createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt
        } as Appointment);
      });
      
      const sortedAppointments = appointments.sort((a, b) => 
        a.date.localeCompare(b.date)
      );
      
      return createApiResponse(true, sortedAppointments);
    } catch (error) {
      return handleServiceError(error, 'r√©cup√©ration des rendez-vous coach');
    }
  }

  static async getTalentAppointments(talentId: string): Promise<ApiResponse<Appointment[]>> {
    try {
      const q = query(
        collection(db, 'Appointments'),
        where('talentId', '==', talentId)
      );
      const querySnapshot = await getDocs(q);
      const appointments: Appointment[] = [];
      
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        appointments.push({
          id: doc.id,
          ...data,
          timestamp: data.timestamp?.toDate ? data.timestamp.toDate() : data.timestamp,
          createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : data.createdAt
        } as Appointment);
      });
      
      const sortedAppointments = appointments.sort((a, b) => 
        a.date.localeCompare(b.date)
      );
      
      return createApiResponse(true, sortedAppointments);
    } catch (error) {
      return handleServiceError(error, 'r√©cup√©ration des rendez-vous talent');
    }
  }

  // Mettre √† jour le statut d'un rendez-vous
  static async updateAppointmentStatus(appointmentId: string, status: Appointment['status']): Promise<void> {
    try {
      const appointmentRef = doc(db, 'Appointments', appointmentId);
      
      // R√©cup√©rer les donn√©es du rendez-vous avant mise √† jour
      const appointmentDoc = await getDoc(appointmentRef);
      const appointmentData = appointmentDoc.data() as Appointment;
      
      await updateDoc(appointmentRef, { status });
      console.log('Statut du rendez-vous mis √† jour');

      // Si le statut passe √† 'confirm√©', g√©n√©rer automatiquement un lien Meet et synchroniser
      if (status === 'confirm√©') {
        try {
          console.log('üîÑ G√©n√©ration automatique du lien Meet et synchronisation...');
          await this.createMeetAndSync(appointmentId, appointmentData);
        } catch (syncError) {
          console.warn('‚ö†Ô∏è Cr√©ation Meet et sync √©chou√©e:', syncError);
        }
      }

      // R√©cup√©rer les donn√©es mises √† jour (avec les liens Meet/Calendar)
      const updatedAppointmentDoc = await getDoc(appointmentRef);
      const updatedAppointmentData = updatedAppointmentDoc.data() as Appointment;

      // Notification EMAIL au talent (Gmail API avec fallback SendGrid)  
      try {
        if (status === 'confirm√©') {
          const gmailSent = await this.sendEmailWithGmail('confirmation', {
            recipientEmail: updatedAppointmentData.talentEmail,
            recipientName: updatedAppointmentData.talentName,
            coachName: updatedAppointmentData.coachName,
            appointmentDate: updatedAppointmentData.date,
            appointmentTime: updatedAppointmentData.time,
            appointmentType: 'Session de coaching',
            meetLink: updatedAppointmentData.meetLink || '',
            calendarLink: updatedAppointmentData.calendarLink || ''
          });

          if (!gmailSent) {
            await sendGridTemplateService.sendAppointmentConfirmation({
              recipientEmail: updatedAppointmentData.talentEmail,
              recipientName: updatedAppointmentData.talentName,
              coachName: updatedAppointmentData.coachName,
              appointmentDate: updatedAppointmentData.date,
              appointmentTime: updatedAppointmentData.time,
              meetingType: 'Session de coaching',
              meetLink: updatedAppointmentData.meetLink || '',
              calendarLink: updatedAppointmentData.calendarLink || ''
            });
          }
        } else {
          const gmailSent = await this.sendEmailWithGmail('new', {
            recipientEmail: appointmentData.talentEmail,
            recipientName: appointmentData.talentName,
            coachName: appointmentData.coachName,
            appointmentDate: appointmentData.date,
            appointmentTime: appointmentData.time,
            meetingType: `Session ${status}`,
            meetLink: appointmentData.meetLink || '',
            calendarLink: appointmentData.calendarLink || ''
          });

          if (!gmailSent) {
            await sendGridTemplateService.sendNewAppointment({
              recipientEmail: appointmentData.talentEmail,
              recipientName: appointmentData.talentName,
              coachName: appointmentData.coachName,
              appointmentDate: appointmentData.date,
              appointmentTime: appointmentData.time,
              meetingType: `Session ${status}`
            });
          }
        }
        
        console.log('‚úÖ Email de mise √† jour envoy√© au talent (Gmail API ou SendGrid)');
      } catch (emailError) {
        console.error('‚ùå Erreur envoi email mise √† jour SendGrid:', emailError);
        // Ne pas faire √©chouer la mise √† jour si l'email √©choue
      }

      // Notification SendGrid template au coach pour mise √† jour
      try {
        // R√©cup√©rer l'email du coach depuis son profil
        const { FirestoreService } = await import('./firestoreService');
        const coachProfile = await FirestoreService.getCurrentProfile(appointmentData.coachId, 'coach');
        
        if (coachProfile && coachProfile.email) {
          if (status === 'confirm√©') {
            // Utiliser Gmail API pour le coach aussi
            const gmailSentToCoach = await this.sendEmailWithGmail('confirmation', {
              recipientEmail: coachProfile.email,
              recipientName: updatedAppointmentData.coachName,
              coachName: updatedAppointmentData.coachName,
              appointmentDate: updatedAppointmentData.date,
              appointmentTime: updatedAppointmentData.time,
              appointmentType: `Rendez-vous confirm√© avec ${updatedAppointmentData.talentName}`,
              meetLink: updatedAppointmentData.meetLink || '',
              calendarLink: updatedAppointmentData.calendarLink || ''
            });

            if (!gmailSentToCoach) {
              // Fallback SendGrid si Gmail √©choue
              await sendGridTemplateService.sendAppointmentConfirmation({
                recipientEmail: coachProfile.email,
                recipientName: updatedAppointmentData.talentName,
                coachName: updatedAppointmentData.coachName,
                appointmentDate: updatedAppointmentData.date,
                appointmentTime: updatedAppointmentData.time,
                meetingType: `Rendez-vous confirm√© avec ${updatedAppointmentData.talentName}`,
                meetLink: updatedAppointmentData.meetLink || '',
                calendarLink: updatedAppointmentData.calendarLink || ''
              });
            }
          } else {
            // Pour annul√© ou reprogramm√© - utiliser Gmail API
            const gmailSentToCoach = await this.sendEmailWithGmail('new', {
              recipientEmail: coachProfile.email,
              recipientName: appointmentData.coachName,
              coachName: appointmentData.coachName,
              appointmentDate: appointmentData.date,
              appointmentTime: appointmentData.time,
              meetingType: `Rendez-vous ${status} avec ${appointmentData.talentName}`
            });

            if (!gmailSentToCoach) {
              // Fallback SendGrid
              await sendGridTemplateService.sendNewAppointment({
                recipientEmail: coachProfile.email,
                recipientName: appointmentData.coachName,
                coachName: appointmentData.coachName,
                appointmentDate: appointmentData.date,
                appointmentTime: appointmentData.time,
                meetingType: `Rendez-vous ${status} avec ${appointmentData.talentName}`
              });
            }
          }
          console.log('‚úÖ Email de mise √† jour envoy√© au coach (Gmail API ou SendGrid fallback)');
        } else {
          console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer l\'email du coach pour mise √† jour');
        }
      } catch (emailError) {
        console.error('‚ùå Erreur envoi email mise √† jour coach SendGrid:', emailError);
        // Ne pas faire √©chouer la mise √† jour si l'email √©choue
      }
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du statut:', error);
      throw new Error('Impossible de mettre √† jour le statut');
    }
  }

  // Cr√©er un lien Meet et synchroniser avec Google Calendar - SOLUTION SIMPLE QUI FONCTIONNE
  private static async createMeetAndSync(appointmentId: string, appointmentData: Appointment): Promise<void> {
    try {
      // V√©rifier si d√©j√† synchronis√© pour √©viter les doublons
      if (appointmentData.googleEventId) {
        console.log('‚úÖ Rendez-vous d√©j√† synchronis√© avec Google Calendar:', appointmentData.googleEventId);
        return;
      }

      // 1. G√©n√©rer un lien Meet fonctionnel
      const meetCode = `${Date.now().toString(36).substr(-3)}-${Math.random().toString(36).substr(2, 4)}-${Math.random().toString(36).substr(2, 3)}`;
      const meetLink = `https://meet.google.com/${meetCode}`;
      
      console.log('üîó Lien Meet g√©n√©r√©:', meetLink);
      
      // 2. Sauvegarder le lien Meet (Google Calendar d√©sactiv√© pour √©viter l'authentification client-side)
      console.log('üìÖ Google Calendar d√©sactiv√© - utilisation du lien Meet uniquement');
      await this.updateAppointmentLinks(appointmentId, meetLink, '');
      
      console.log('‚úÖ Lien Meet cr√©√© et sauvegard√© avec succ√®s:', { meetLink, appointmentId });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation Meet et sync:', error);
      throw error;
    }
  }


  // Annuler un rendez-vous
  static async cancelAppointment(appointmentId: string): Promise<void> {
    try {
      const appointmentRef = doc(db, 'Appointments', appointmentId);
      await updateDoc(appointmentRef, { status: 'annul√©' });
      console.log('Rendez-vous annul√©');
    } catch (error) {
      console.error('Erreur lors de l\'annulation:', error);
      throw new Error('Impossible d\'annuler le rendez-vous');
    }
  }

  // Supprimer un rendez-vous
  static async deleteAppointment(appointmentId: string): Promise<void> {
    try {
      const appointmentRef = doc(db, 'Appointments', appointmentId);
      await deleteDoc(appointmentRef);
      console.log('Rendez-vous supprim√©');
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      throw new Error('Impossible de supprimer le rendez-vous');
    }
  }

  // V√©rifier si un cr√©neau est disponible
  static async isSlotAvailable(coachId: string, date: string, time: string): Promise<boolean> {
    try {
      const q = query(
        collection(db, 'Appointments'),
        where('coachId', '==', coachId),
        where('date', '==', date),
        where('time', '==', time),
        where('status', 'in', ['confirm√©', 'en_attente'])
      );
      const querySnapshot = await getDocs(q);
      return querySnapshot.empty;
    } catch (error) {
      console.error('Erreur lors de la v√©rification de disponibilit√©:', error);
      return false;
    }
  }

  // Mettre √† jour l'ID Google Calendar d'un rendez-vous
  static async updateAppointmentGoogleEventId(appointmentId: string, googleEventId: string): Promise<void> {
    try {
      const appointmentRef = doc(db, 'Appointments', appointmentId);
      await updateDoc(appointmentRef, { googleEventId });
      console.log('‚úÖ Google Event ID mis √† jour pour le rendez-vous:', appointmentId);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du Google Event ID:', error);
      throw new Error('Impossible de mettre √† jour le Google Event ID');
    }
  }

  // Mettre √† jour les liens Meet et Calendar d'un rendez-vous
  static async updateAppointmentLinks(appointmentId: string, meetLink?: string, calendarLink?: string): Promise<void> {
    try {
      const appointmentRef = doc(db, 'Appointments', appointmentId);
      const updateData: any = {};
      
      if (meetLink) updateData.meetLink = meetLink;
      if (calendarLink) updateData.calendarLink = calendarLink;
      
      await updateDoc(appointmentRef, updateData);
      console.log('‚úÖ Liens Meet/Calendar mis √† jour pour le rendez-vous:', appointmentId);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des liens Meet/Calendar:', error);
      throw new Error('Impossible de mettre √† jour les liens Meet/Calendar');
    }
  }

  // Fonction helper pour envoyer emails via Firebase Functions backend avec fallback SendGrid
  private static async sendEmailWithGmail(type: 'confirmation' | 'new', data: {
    recipientEmail: string;
    recipientName: string;
    coachName: string;
    appointmentDate: string;
    appointmentTime: string;
    appointmentType?: string;
    meetingType?: string;
    meetLink?: string;
    calendarLink?: string;
  }): Promise<boolean> {
    try {
      console.log('üìß Envoi via Firebase Functions backend...');
      
      if (type === 'confirmation') {
        return await BackendEmailService.sendAppointmentConfirmation({
          recipientEmail: data.recipientEmail,
          recipientName: data.recipientName,
          coachName: data.coachName,
          appointmentDate: data.appointmentDate,
          appointmentTime: data.appointmentTime,
          appointmentType: data.appointmentType || 'Session de coaching',
          meetLink: data.meetLink,
          calendarLink: data.calendarLink
        });
      } else {
        return await BackendEmailService.sendNewAppointment({
          recipientEmail: data.recipientEmail,
          recipientName: data.recipientName,
          coachName: data.coachName,
          appointmentDate: data.appointmentDate,
          appointmentTime: data.appointmentTime,
          meetingType: data.meetingType || 'Session de coaching',
          meetLink: data.meetLink,
          calendarLink: data.calendarLink
        });
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Firebase Functions backend √©chou√©, utilisation SendGrid fallback:', error);
      return false;
    }
  }

  // Obtenir les cr√©neaux disponibles pour un coach
  static async getAvailableSlots(coachId: string, date: string): Promise<string[]> {
    try {
      // Cr√©neaux de base (9h-18h, toutes les 30 minutes)
      const baseSlots = [
        '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
        '12:00', '12:30', '13:00', '13:30', '14:00', '14:30',
        '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'
      ];

      // R√©cup√©rer les cr√©neaux r√©serv√©s
      const q = query(
        collection(db, 'Appointments'),
        where('coachId', '==', coachId),
        where('date', '==', date),
        where('status', 'in', ['confirm√©', 'en_attente'])
      );
      const querySnapshot = await getDocs(q);
      const bookedSlots = querySnapshot.docs.map(doc => doc.data().time);

      // Retourner les cr√©neaux disponibles
      return baseSlots.filter(slot => !bookedSlots.includes(slot));
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cr√©neaux disponibles:', error);
      return [];
    }
  }
}
